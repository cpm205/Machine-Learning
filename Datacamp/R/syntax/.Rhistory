# Box office Star Wars (in millions!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
# Create box_office
box_office <- c(new_hope, empire_strikes, return_jedi)
print(box_office)
# Box office Star Wars (in millions!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
# Create box_office
box_office <- c(new_hope, empire_strikes, return_jedi)
print(box_office)
# Construct star_wars_matrix
star_wars_matrix <- matrix(box_office, byrow = TRUE, nrow = 3)
print(star_wars_matrix)
# Box office Star Wars (in millions!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
# Create box_office
box_office <- c(new_hope, empire_strikes, return_jedi)
print(box_office)
# Construct star_wars_matrix
star_wars_matrix <- matrix(box_office, byrow = TRUE, nrow = 3)
print(star_wars_matrix)
# Vectors region and titles, used for naming
region <- c("US", "non-US")
titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
# Box office Star Wars (in millions!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
# Create box_office
box_office <- c(new_hope, empire_strikes, return_jedi)
print(box_office)
# Construct star_wars_matrix
star_wars_matrix <- matrix(box_office, byrow = TRUE, nrow = 3)
print(star_wars_matrix)
# Vectors region and titles, used for naming
region <- c("US", "non-US")
titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
# Name the columns with region
colnames(star_wars_matrix) <- region
# Name the rows with titles
rownames(star_wars_matrix) <- titles
# Print out star_wars_matrix
print(star_wars_matrix)
# Box office Star Wars (in millions!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
# Create box_office
box_office <- c(new_hope, empire_strikes, return_jedi)
print(box_office)
# Construct star_wars_matrix
star_wars_matrix <- matrix(box_office, byrow = TRUE, nrow = 3)
print(star_wars_matrix)
# Vectors region and titles, used for naming
region <- c("US", "non-US")
titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
# Name the columns with region
colnames(star_wars_matrix) <- region
# Name the rows with titles
rownames(star_wars_matrix) <- titles
# Print out star_wars_matrix
print(star_wars_matrix)
# Calculate worldwide box office figures
worldwide_vector <- rowSums(star_wars_matrix)
print(worldwide_vector)
# Print out star_wars_matrix
print(star_wars_matrix)
# Calculate worldwide box office figures
worldwide_vector <- rowSums(star_wars_matrix)
print(worldwide_vector)
# Print out star_wars_matrix
print(star_wars_matrix)
# Print out star_wars_matrix
print(star_wars_matrix)
# Calculate worldwide box office figures
worldwide_vector <- rowSums(star_wars_matrix)
print(worldwide_vector)
# Print out star_wars_matrix
print(star_wars_matrix)
# Calculate worldwide box office figures
worldwide_vector <- rowSums(star_wars_matrix)
print(worldwide_vector)
all_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)
print(all_wars_matrix)
print(all_wars_matrix)
# Total revenue for US and non-US
total_revenue_vector <- colSums(all_wars_matrix)
# Print out total_revenue_vector
print(total_revenue_vector)
print(all_wars_matrix)
# Total revenue for US and non-US
total_revenue_vector <- colSums(all_wars_matrix)
# Print out total_revenue_vector
print(total_revenue_vector)
print(all_wars_matrix)
# Print out total_revenue_vector
print(total_revenue_vector)
print(all_wars_matrix)
#selects the element at the first row and second column.
print(all_wars_matrix[1,2])
#results in a matrix with the data on the rows 1, 2, 3 and columns 2
print(all_wars_matrix[1:3,2])
#selects all elements of the first column
print(all_wars_matrix[,1])
#selects all elements of the first row.
print(all_wars_matrix[1,])
# Select the non-US revenue for all movies
non_us_all <- all_wars_matrix[,2]
non_us_all <- all_wars_matrix[,2]
print(non_us_all)
# Average non-US revenue
mean(non_us_all)
# Select the non-US revenue for first two movies
non_us_some <- all_wars_matrix[1:2,2]
print(non_us_some)
# Select the non-US revenue for all movies
non_us_all <- all_wars_matrix[,2]
print(non_us_all)
# Average non-US revenue
mean(non_us_all)
# Select the non-US revenue for first two movies
non_us_some <- all_wars_matrix[1:2,2]
print(non_us_some)
# Average non-US revenue for first two movies
mean(non_us_some)
# Estimate the visitors
visitors <- all_wars_matrix/5
# Print the estimate to the console
print(visitors)
#The term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. A continuous variable, on the other hand, can correspond to an infinite number of values.
#It is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)
#A good example of a categorical variable is the variable 'Gender'. A human individual can either be "Male" or "Female", making abstraction of inter-sexes. So here "Male" and "Female" are, in a simplified sense, the two values of the categorical variable "Gender", and every observation can be assigned to either the value "Male" of "Female".
# Gender vector
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
# Convert gender_vector to a factor
factor_gender_vector <- factor(gender_vector)
# Print out factor_gender_vector
print(factor_gender_vector)
#There are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.
#A nominal variable is a categorical variable without an implied order. This means that it is impossible to say that 'one is worth more than the other'. For example, think of the categorical variable animals_vector with the categories "Elephant", "Giraffe", "Donkey" and "Horse". Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).
#In contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable temperature_vector with the categories: "Low", "Medium" and "High". Here it is obvious that "Medium" stands above "Low", and "High" stands above "Medium".
# Animals
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
# Temperature
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
#The term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. A continuous variable, on the other hand, can correspond to an infinite number of values.
#It is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)
#A good example of a categorical variable is the variable 'Gender'. A human individual can either be "Male" or "Female", making abstraction of inter-sexes. So here "Male" and "Female" are, in a simplified sense, the two values of the categorical variable "Gender", and every observation can be assigned to either the value "Male" of "Female".
# Gender vector
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
# Convert gender_vector to a factor
factor_gender_vector <- factor(gender_vector)
# Print out factor_gender_vector
print(factor_gender_vector)
#There are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.
#A nominal variable is a categorical variable without an implied order. This means that it is impossible to say that 'one is worth more than the other'. For example, think of the categorical variable animals_vector with the categories "Elephant", "Giraffe", "Donkey" and "Horse". Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).
#In contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable temperature_vector with the categories: "Low", "Medium" and "High". Here it is obvious that "Medium" stands above "Low", and "High" stands above "Medium".
# Animals - a nominal categorical variable
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
# Temperature - ordinal categorical variable
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
# Specify the levels of factor_survey_vector
levels(factor_survey_vector) <- c("Female", "Male")
print(factor_survey_vector)
#The term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. A continuous variable, on the other hand, can correspond to an infinite number of values.
#It is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)
#A good example of a categorical variable is the variable 'Gender'. A human individual can either be "Male" or "Female", making abstraction of inter-sexes. So here "Male" and "Female" are, in a simplified sense, the two values of the categorical variable "Gender", and every observation can be assigned to either the value "Male" of "Female".
# Gender vector
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
# Convert gender_vector to a factor
factor_gender_vector <- factor(gender_vector)
# Print out factor_gender_vector
print(factor_gender_vector)
#There are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.
#A nominal variable is a categorical variable without an implied order. This means that it is impossible to say that 'one is worth more than the other'. For example, think of the categorical variable animals_vector with the categories "Elephant", "Giraffe", "Donkey" and "Horse". Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).
#In contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable temperature_vector with the categories: "Low", "Medium" and "High". Here it is obvious that "Medium" stands above "Low", and "High" stands above "Medium".
# Animals - a nominal categorical variable
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
# Temperature - ordinal categorical variable
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
print(factor_survey_vector)
# Specify the levels of factor_survey_vector
levels(factor_survey_vector) <- c("Female", "Male")
print(factor_survey_vector)
#Summarizing a factor
# Generate summary for survey_vector
summary(survey_vector)
# Generate summary for factor_survey_vector
summary(factor_survey_vector)
#Summarizing a factor
# Generate summary for survey_vector
summary(survey_vector)
# Generate summary for factor_survey_vector
summary(factor_survey_vector)
# Male
male <- factor_survey_vector[1]
# Female
female <- factor_survey_vector[2]
# Battle of the sexes: Male 'larger' than female?
male > female
#Summarizing a factor
# Generate summary for survey_vector
summary(survey_vector)
# Generate summary for factor_survey_vector
summary(factor_survey_vector)
# Male
male <- factor_survey_vector[1]
# Female
female <- factor_survey_vector[2]
# Generate summary for survey_vector
summary(survey_vector)
# Generate summary for factor_survey_vector
summary(factor_survey_vector)
# Male
male <- factor_survey_vector[1]
print(male)
# Female
female <- factor_survey_vector[2]
print(female)
# Battle of the sexes: Male 'larger' than female?
male > female
# Create speed_vector
speed_vector <- c("fast", "slow", "slow", "fast", "insane")
# Convert speed_vector to ordered factor vector
factor_speed_vector <-factor(speed_vector,ordered = TRUE,levels = c("slow", "fast", "insane"))
# Print factor_speed_vector
factor_speed_vector
summary(factor_speed_vector)
# Factor value for second data analyst
da2 <- factor_speed_vector[2]
print(da2)
# Factor value for fifth data analyst
da5 <- factor_speed_vector[5]
print(da5)
# Is data analyst 2 faster than data analyst 5?
da2 > da5
library(readr)
mtcars <- read_csv("C:/MyStuff/Machine Learning/Datacamp/R/syntax/mtcars.csv")
View(mtcars)
head(mtcars)
tail(mtcars)
#You may remember from the chapter about matrices that all the elements that you put in a matrix should be of the same type. Back then,
#your data set on Star Wars only contained numeric elements.
# Call head() on mtcars
head(mtcars)
tail(mtcars)
# Investigate the structure of mtcars
str(mtcars)
# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Create a data frame from the vectors
planets_df <- data.frame(name, type, diameter, rotation, rings)
str(planets_df)
head(mtcars)
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Create a data frame from the vectors
planets_df <- data.frame(name, type, diameter, rotation, rings)
# Check the structure of planets_df
str(planets_df)
print(planets_df)
# Create a data frame from the vectors
planets_df <- data.frame(name, type, diameter, rotation, rings)
# Check the structure of planets_df
str(planets_df)
print(planets_df)
# The planets_df data frame from the previous exercise is pre-loaded
planets_df[1,3]
# Print out diameter of Mercury (row 1, column 3)
print(planets_df[1,3])
# Print out data for Mars (entire fourth row)
print(planets_df[4,])
# Select first 5 values of diameter column
print(planets_df[1:5, 3])
# Anotther way to select entire column from planets_df
rings_vector <- planets_df$rings
# Print out rings_vector
print(rings_vector)
print(planets_df)
# Adapt the code to select all columns for planets with rings
planets_df[rings_vector, ]
#Sorting
# Use order() to create positions
positions <- order(planets_df$diameter)
# Use positions to sort planets_df
planets_df[positions,]
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
print(my_list)
#Vectors (one dimensional array): can hold numeric, character or logical values. The elements in a vector all have the same data type.
#Matrices (two dimensional array): can hold numeric, character or logical values. The elements in a matrix all have the same data type.
#Data frames (two-dimensional objects): can hold numeric, character or logical values. Within a column all elements have the same data type, but different columns can be of different data type
#A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way.
#You could say that a list is some kind super data type: you can store practically any piece of information in it!
# Vector with numerics from 1 up to 10
my_vector <- 1:10
# Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)
# First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]
# Construct list with these different elements:
my_list <- list(my_vector, my_matrix, my_df)
print(my_list)
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
#Vectors (one dimensional array): can hold numeric, character or logical values. The elements in a vector all have the same data type.
#Matrices (two dimensional array): can hold numeric, character or logical values. The elements in a matrix all have the same data type.
#Data frames (two-dimensional objects): can hold numeric, character or logical values. Within a column all elements have the same data type, but different columns can be of different data type
#A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way.
#You could say that a list is some kind super data type: you can store practically any piece of information in it!
# Vector with numerics from 1 up to 10
my_vector <- 1:10
print(my_vector)
# Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)
print(my_matrix)
# First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]
print(my_df)
# Construct list with these different elements:
my_list <- list(my_vector, my_matrix, my_df)
print(my_list)
#Vectors (one dimensional array): can hold numeric, character or logical values. The elements in a vector all have the same data type.
#Matrices (two dimensional array): can hold numeric, character or logical values. The elements in a matrix all have the same data type.
#Data frames (two-dimensional objects): can hold numeric, character or logical values. Within a column all elements have the same data type, but different columns can be of different data type
#A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way.
#You could say that a list is some kind super data type: you can store practically any piece of information in it!
# Vector with numerics from 1 up to 10
my_vector <- 1:10
print(my_vector)
# Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)
print(my_matrix)
# First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]
print(my_df)
# Construct list with these different elements:
my_list <- list(my_vector, my_matrix, my_df)
print(my_list)
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
#Creating a named list
names(my_list) <- c("vec", "mat", "df")
print(my_list)
#Selecting elements from a list
my_list$mat
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
my_list$mat
my_list$mat[2]
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
#Adding more information to the list
my_list_full <- c(my_list, year = 1980)
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
print(my_list_full)
my_list["vec"]
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
#Selecting elements from a list
my_list$mat
#another way
my_list["mat"]
source('C:/MyStuff/Machine Learning/Datacamp/R/syntax/Lists.R')
my_list$vec
my_list["vec"]
products <- data.frame(
item = c("A", "B", "B", "A", "B"),
cost = c(50, 46, 28, 38, 20),
profit = c(15, 5, 10, 12, 5),
sold_out = c(FALSE, TRUE, FALSE, FALSE, TRUE)
)
print(products)
print(products)
subset(products, subset = profit < 12)
source('~/Machine-Learning/Datacamp/R/syntax/operator.R')
source('~/Machine-Learning/Datacamp/R/syntax/operator.R')
# The linkedin vector has already been defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
# Loop version 1
for (l in linkedin) {
print(l)
}
# Loop version 2
for (i in 1:length(linkedin)) {
print(linkedin[i])
}
nyc <- list(pop = 8405837,
boroughs = c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island"),
capital = FALSE)
# Loop version 1
for (n in nyc) {
print(n)
}
# Loop version 2
#Notice that you need double square brackets - [[ ]] - to select the list elements in loop version 2.
for (i in 1:length(nyc)) {
print(nyc[[i]])
}
# The linkedin vector has already been defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
# Loop version 1
for (l in linkedin) {
print(l)
}
# Loop version 2
for (i in 1:length(linkedin)) {
print(linkedin[i])
}
nyc <- list(pop = 8405837,
boroughs = c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island"),
capital = FALSE)
# Loop version 1
for (n in nyc) {
print(n)
}
# Loop version 2
#Notice that you need double square brackets - [[ ]] - to select the list elements in loop version 2.
for (i in 1:length(nyc)) {
print(nyc[i])
}
# The linkedin vector has already been defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
# Loop version 1
for (l in linkedin) {
print(l)
}
# Loop version 2
for (i in 1:length(linkedin)) {
print(linkedin[i])
}
nyc <- list(pop = 8405837,
boroughs = c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island"),
capital = FALSE)
# Loop version 1
for (n in nyc) {
print(n)
}
# Loop version 2
#Notice that you need double square brackets - [[ ]] - to select the list elements in loop version 2.
for (i in 1:length(nyc)) {
print(nyc[[i]])
}
for (i in 1:length(nyc)) {
print(nyc[i])
}
